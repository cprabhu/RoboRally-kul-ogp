package roborally.model.auxiliary;

import roborally.model.Board;
import roborally.model.auxiliary.Energy.unitOfPower;

/**
 * @author Ben Adriaenssens <ben.adriaenssens@student.kuleuven.be> - WtkCws,
 *         Toon Nolten <toon.nolten@student.kuleuven.be> - CwsElt.
 */
public enum Orientation {
    UP, RIGHT, DOWN, LEFT;

    public Orientation turnClockwise90() {
        switch (this) {
        case UP:
            return RIGHT;
        case RIGHT:
            return DOWN;
        case DOWN:
            return LEFT;
        case LEFT:
            return UP;
        default:
            return UP;
        }
    }

    public Orientation turnCounterClockwise90() {
        switch (this) {
        case UP:
            return LEFT;
        case RIGHT:
            return UP;
        case DOWN:
            return RIGHT;
        case LEFT:
            return DOWN;
        default:
            return UP;
        }
    }

    public Orientation turn180() {
        switch (this) {
        case UP:
            return DOWN;
        case RIGHT:
            return LEFT;
        case DOWN:
            return UP;
        case LEFT:
            return RIGHT;
        default:
            return UP;
        }
    }

    public Energy getEnergyRequiredForOrientation(Orientation orientation,
            Energy energyToTurn) {
        Energy turnEnergy = new Energy(0, unitOfPower.Ws);

        if (this.turnClockwise90() == orientation
                || this.turnCounterClockwise90() == orientation)
            turnEnergy.addEnergy(energyToTurn);
        if (this.turn180() == orientation) {
            turnEnergy.addEnergy(energyToTurn);
            turnEnergy.addEnergy(energyToTurn);
        }

        return turnEnergy;
    }

    // TODO: NOTE check defensief new Position
    public Position nextPosition(Position currentPosition) {
        if (currentPosition != null) {
            long x = currentPosition.X;
            long y = currentPosition.Y;
            Board board = currentPosition.BOARD;

            try {
                switch (this) {
                case UP:
                    return Position.newPosition(x, y - 1, board);
                case RIGHT:
                    return Position.newPosition(x + 1, y, board);
                case DOWN:
                    return Position.newPosition(x, y + 1, board);
                case LEFT:
                    return Position.newPosition(x - 1, y, board);
                default:
                    return currentPosition;
                }
            } catch (IllegalArgumentException exc) {

                System.err.print("nextPosition is off the board: (");
                switch (this) {
                case UP:
                    System.err.println(x + ", " + (y - 1) + ")");
                    break;
                case RIGHT:
                    System.err.println((x + 1) + ", " + y + ")");
                    break;
                case DOWN:
                    System.err.println(x + ", " + (y + 1) + ")");
                    break;
                case LEFT:
                    System.err.println((x - 1) + ", " + y + ")");
                    break;
                }

            }
        }
        return null;
    }
}
