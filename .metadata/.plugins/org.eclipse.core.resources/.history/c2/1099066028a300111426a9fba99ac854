package roborally.program;

import java.util.List;

import roborally.model.Robot;

class If extends CombinedCommand {

    If(String commandString, Robot robot) {
        super(robot);

        List<String> ifString = Program.allSubParenthesed(commandString
                .substring(4, commandString.length() - 1));

        condition = Condition.newCondition(ifString.get(0), robot);
        conditionSatisfiedCommand = newCommand(ifString.get(1), robot);
        conditionNotSatisfiedCommand = newCommand(ifString.get(2), robot);
    }

    @Override
    void execute() {
        if (robot != null) {
            if (isBusy()) {
                if (branch == 1)
                    conditionSatisfiedCommand.execute();
                else if (branch == 2)
                    conditionNotSatisfiedCommand.execute();
            } else if (condition.evaluate()) {
                branch = 1;
                conditionSatisfiedCommand.execute();
            } else {
                branch = 2;
                conditionNotSatisfiedCommand.execute();
            }
        }
    }

    @Override
    boolean isBusy() {
        return (conditionSatisfiedCommand instanceof CombinedCommand && ((CombinedCommand) conditionSatisfiedCommand)
                .isBusy())
                || (conditionNotSatisfiedCommand instanceof CombinedCommand && ((CombinedCommand) conditionNotSatisfiedCommand)
                        .isBusy());
    }

    public String toString() {
        String newLine = System.getProperty("line.separator");
        String commandString = "(if"
                + newLine
                + "  "
                + condition.toString().replace(newLine, newLine + "  ")
                + newLine
                + "  "
                + conditionSatisfiedCommand.toString().replace(newLine,
                        newLine + "  ")
                + newLine
                + "  "
                + conditionNotSatisfiedCommand.toString().replace(newLine,
                        newLine + "  ") + newLine + ")";

        return commandString;
    }

    private final Condition condition;
    private final Command conditionSatisfiedCommand;
    private final Command conditionNotSatisfiedCommand;
    private int branch = 0;
}
