package roborally.model;

import java.io.*;
import java.util.*;

import roborally.IFacade;
import roborally.model.auxiliary.Energy;
import roborally.model.auxiliary.Orientation;
import roborally.model.auxiliary.Position;
import roborally.model.auxiliary.Weight;
import roborally.model.auxiliary.Energy.unitOfPower;
import roborally.model.auxiliary.Weight.unitOfMass;
import roborally.program.Program;

public class Facade implements
        IFacade<Board, Robot, Wall, Battery, RepairKit, SurpriseBox> {

    /**
     * Create a new board with the given <code>width</code> and <code>height</code>. 
     * 
     * This method must return <code>null</code> if the given <code>width</code> and <code>height</code> are invalid. 
     */
    @Override
    public Board createBoard(long width, long height) {
        try {
            return new Board(width, height);
        } catch (Exception exc) {
            return null;
        }
    }

    /**
     * Merge <code>board1</code> and <code>board2</code>. 
     */
    @Override
    public void merge(Board board1, Board board2) {
        if (board1 != null)
            board1.merge(board2);
    }

    /**
     * Create a new battery with initial energy equal to <code>initialEnergy</code> and weight equal to <code>weight</code>. 
     * 
     * This method must return <code>null</code> if the given parameters are invalid (e.g. negative weight). 
     */
    @Override
    public Battery createBattery(double initialEnergy, int weight) {
        if (initialEnergy >= 0 && initialEnergy <= 5000 && weight >= 0)
            return new Battery(null, new Energy(initialEnergy,
                    Energy.unitOfPower.Ws), new Weight(weight,
                    Weight.unitOfMass.g));
        return null;
    }

    /**
     * Put <code>battery</code> at position (<code>x</code>, <code>y</code>) on <code>board</code> (if possible).
     */
    @Override
    public void putBattery(Board board, long x, long y, Battery battery) {
        if (board != null && board.isValidPosition(x, y))
            board.putElement(Position.newPosition(x, y, board), battery);
    }

    /**
     * Return the x-coordinate of <code>battery</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>battery</code> is not placed on a board.
     */
    @Override
    public long getBatteryX(Battery battery) throws IllegalStateException {
        if (battery.getPosition() == null)
            throw new IllegalStateException();
        return battery.getPosition().X;
    }

    /**
     * Return the y-coordinate of <code>battery</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>battery</code> is not placed on a board.
     */
    @Override
    public long getBatteryY(Battery battery) throws IllegalStateException {
        if (battery.getPosition() == null)
            throw new IllegalStateException();
        return battery.getPosition().Y;
    }

    /**
     * Create a new repair kit that repairs <code>repairAmount</code>. 
     * 
     * This method must return <code>null</code> if the given parameters are invalid (e.g. negative <code>repairAmount</code>). 
     */
    @Override
    public RepairKit createRepairKit(double repairAmount, int weight) {
        if (repairAmount >= 0 && weight >= 0)
            return new RepairKit(null, new Weight(weight, unitOfMass.g),
                    new Energy(repairAmount, unitOfPower.Ws));
        return null;
    }

    /**
     * Put <code>repairKit</code> at position (<code>x</code>, <code>y</code>) on <code>board</code> (if possible).
     */
    @Override
    public void putRepairKit(Board board, long x, long y, RepairKit repairKit) {
        if (board != null && board.isValidPosition(x, y))
            board.putElement(Position.newPosition(x, y, board), repairKit);
    }

    /**
     * Return the x-coordinate of <code>repairKit</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>repairKit</code> is not placed on a board.
     */
    @Override
    public long getRepairKitX(RepairKit repairKit) throws IllegalStateException {
        if (repairKit.getPosition() == null)
            throw new IllegalStateException();
        return repairKit.getPosition().X;
    }

    /**
     * Return the y-coordinate of <code>repairKit</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>repairKit</code> is not placed on a board.
     */
    @Override
    public long getRepairKitY(RepairKit repairKit) throws IllegalStateException {
        if (repairKit.getPosition() == null)
            throw new IllegalStateException();
        return repairKit.getPosition().Y;
    }

    /**
     * Create a new surprise box with weighing <code>weight</code>. 
     * 
     * This method must return <code>null</code> if the given parameters are invalid (e.g. negative <code>weight</code>). 
     */
    @Override
    public SurpriseBox createSurpriseBox(int weight) {
        if (weight >= 0)
            return new SurpriseBox(null, new Weight(weight, unitOfMass.g));
        return null;
    }

    /**
     * Put <code>surpriseBox</code> at position (<code>x</code>, <code>y</code>) on <code>board</code> (if possible).
     */
    @Override
    public void putSurpriseBox(Board board, long x, long y,
            SurpriseBox surpriseBox) {
        if (board != null && board.isValidPosition(x, y))
            board.putElement(Position.newPosition(x, y, board), surpriseBox);
    }

    /**
     * Return the x-coordinate of <code>surpriseBox</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>surpriseBox</code> is not placed on a board.
     */
    @Override
    public long getSurpriseBoxX(SurpriseBox surpriseBox)
            throws IllegalStateException {
        if (surpriseBox.getPosition() == null)
            throw new IllegalStateException();
        return surpriseBox.getPosition().X;
    }

    /**
     * Return the y-coordinate of <code>surpriseBox</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>surpriseBox</code> is not placed on a board.
     */
    @Override
    public long getSurpriseBoxY(SurpriseBox surpriseBox)
            throws IllegalStateException {
        if (surpriseBox.getPosition() == null)
            throw new IllegalStateException();
        return surpriseBox.getPosition().Y;
    }

    /** 
     * Create a new Robot looking at <code>orientation</code> with <code>energy</code> watt-second.
     * 
     * This method must return <code>null</code> if the given parameters are invalid (e.g. negative energy). 
     *  
     * <p>0, 1, 2, 3 respectively represent up, right, down and left.</p>
     */
    @Override
    public Robot createRobot(int orientation, double initialEnergy) {
        if (orientation >= 0 && orientation <= 3 && initialEnergy >= 0
                && initialEnergy <= 20000) {
            Orientation initialOrienation;
            switch (orientation) {
            case 0:
                initialOrienation = Orientation.UP;
                break;
            case 1:
                initialOrienation = Orientation.RIGHT;
                break;
            case 2:
                initialOrienation = Orientation.DOWN;
                break;
            case 3:
                initialOrienation = Orientation.LEFT;
                break;
            default:
                initialOrienation = Orientation.UP;
            }
            return new Robot(new Energy(initialEnergy, unitOfPower.Ws),
                    initialOrienation);
        }
        return null;
    }

    /**
     * Put <code>robot</code> at position (<code>x</code>, <code>y</code>) on <code>board</code> (if possible).
     */
    @Override
    public void putRobot(Board board, long x, long y, Robot robot) {
        if (board != null && board.isValidPosition(x, y))
            board.putElement(Position.newPosition(x, y, board), robot);
    }

    /**
     * Return the x-coordinate of <code>robot</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>robot</code> is not placed on a board.
     */
    @Override
    public long getRobotX(Robot robot) throws IllegalStateException {
        if (robot == null || robot.getPosition() == null)
            throw new IllegalStateException();
        return robot.getPosition().X;
    }

    /**
     * Return the y-coordinate of <code>robot</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>robot</code> is not placed on a board.
     */
    @Override
    public long getRobotY(Robot robot) throws IllegalStateException {
        if (robot == null || robot.getPosition() == null)
            throw new IllegalStateException();
        return robot.getPosition().Y;
    }

    /**
     * Return the orientation (either 0, 1, 2 or 3) of <code>robot</code>. 
     * 
     * <p>0, 1, 2, 3 respectively represent up, right, down and left.</p>
     */
    @Override
    public int getOrientation(Robot robot) {
        return robot.getOrientationInt();
    }

    /**
     * Return the current energy in watt-second of <code>robot</code>.
     */
    @Override
    public double getEnergy(Robot robot) {
        return robot.getAmountOfEnergy();
    }

    /**
     * Move <code>robot</code> one step in its current direction if the robot has sufficient energy. Do not modify the state of the robot
     * if it has insufficient energy.
     */
    @Override
    public void move(Robot robot) {
        if (robot != null)
            try {
                robot.move();
            } catch (AssertionError ae) {
                System.err
                        .println("move: This assertionerror is to be expected"
                                + "if the robot has insufficient energy.");
            }
    }

    /**
     * Turn <code>robot</code> 90 degrees in clockwise direction if the robot has sufficient energy. Do not modify the state of the robot
     * if it has insufficient energy.
     */
    @Override
    public void turn(Robot robot) {
        if (robot != null)
            robot.turnClockwise90();
    }

    /**
     * Make <code>robot</code> pick up <code>battery</code> (if possible).
     */
    @Override
    public void pickUpBattery(Robot robot, Battery battery) {
        if (robot != null)
            robot.pickup(battery);
    }

    /**
     * Make <code>robot</code> use <code>battery</code> (if possible).
     */
    @Override
    public void useBattery(Robot robot, Battery battery) {
        if (robot != null)
            robot.use(battery);
    }

    /**
     * Make <code>robot</code> drop <code>battery</code> (if possible).
     */
    @Override
    public void dropBattery(Robot robot, Battery battery) {
        if (robot != null)
            robot.drop(battery);
    }

    /**
     * Make <code>robot</code> pick up <code>repairKit</code> (if possible).
     */
    @Override
    public void pickUpRepairKit(Robot robot, RepairKit repairKit) {
        if (robot != null)
            robot.pickup(repairKit);
    }

    /**
     * Make <code>robot</code> use <code>repairKit</code> (if possible).
     */
    @Override
    public void useRepairKit(Robot robot, RepairKit repairKit) {
        if (robot != null)
            robot.use(repairKit);
    }

    /**
     * Make <code>robot</code> drop <code>repairKit</code> (if possible).
     */
    @Override
    public void dropRepairKit(Robot robot, RepairKit repairKit) {
        if (robot != null)
            robot.drop(repairKit);
    }

    /**
     * Make <code>robot</code> pick up <code>surpriseBox</code> (if possible).
     */
    @Override
    public void pickUpSurpriseBox(Robot robot, SurpriseBox surpriseBox) {
        if (robot != null)
            robot.pickup(surpriseBox);
    }

    /**
     * Make <code>robot</code> use <code>surpriseBox</code> (if possible).
     */
    @Override
    public void useSurpriseBox(Robot robot, SurpriseBox surpriseBox) {
        if (robot != null)
            robot.use(surpriseBox);
    }

    /**
     * Make <code>robot</code> drop <code>surpriseBox</code> (if possible).
     */
    @Override
    public void dropSurpriseBox(Robot robot, SurpriseBox surpriseBox) {
        if (robot != null)
            robot.drop(surpriseBox);
    }

    /**
     * Transfer all items possessed by <code>from</code> to <code>to</code>.  
     */
    @Override
    public void transferItems(Robot from, Robot to) {
        if (from != null)
            from.transferItems(to);
    }

    /**
     * Return whether your implementation of <code>isMinimalCostToReach</code> takes into account other robots, walls and turning (required to score 17+). The return
     * value of this method determines the expected return value of <code>isMinimalCostToReach</code> in the test suite.
     * 
     * This method must return either 0 or 1.
     */
    @Override
    public int isMinimalCostToReach17Plus() {
        return 1;
    }

    /**
     * Return the minimal amount of energy required for <code>robot</code> to reach (<code>x</code>, </code>y</code>) taking into account the robot's current load and energy level. Do not take into account
     * shooting and picking up/using/dropping batteries. 
     * <p>
     * The expected return value of this method depends on <code>isMinimalCostToReach17Plus</code>:
     * <ul>
     * <li>If <code>isMinimalCostToReach17Plus</code> returns <code>0</code>, then <code>getMinimalCostToReach</code> will only be called if there are no obstacles in the rectangle
     * covering <code>robot</code> and the given position. Moreover, the result of this method should not include the energy required for turning.</li>
     * <li>If <code>isMinimalCostToReach17Plus</code> returns <code>1</code>, then <code>getMinimalCostToReach</code> must take into account obstacles (i.e. walls, other robots) and the 
     * fact that turning consumes energy. This method must return <code>-1</code> if the given position is not reachable because of obstacles.</li>
     * </ul>
     * </p>
     * In any case, this method must return <code>-1</code> if <code>robot</code> is not placed on a board. Moreover, this method must return <code>-2</code> if <code>robot</code> has
     * insufficient energy to reach (<code>x</code>, <code>y</code>).
     */
    @Override
    public double getMinimalCostToReach(Robot robot, long x, long y) {
        if (robot != null && robot.getPosition() != null)
            return robot.getEnergyRequiredToReachWs(Position.newPosition(x, y,
                    robot.getPosition().BOARD));
        return -1;
    }

    /**
     * Return whether your implementation of <code>moveNextTo</code> takes into account other robots, walls and the fact that turning consumes energy (required to score 18+). The return
     * value of this method determines the expected effect of <code>moveNextTo</code> in the test suite.
     * 
     * This method must return either 0 or 1.
     */
    @Override
    public int isMoveNextTo18Plus() {
        return 1;
    }

    /**
     * Move <code>robot</code> as close as possible (expressed as the manhattan distance) to <code>other</code> given their current energy and load. If multiple optimal (in distance) solutions
     * exist, select the solution that requires the least amount of total energy. Both robots can move and turn to end up closer to each other. Do not take into account shooting and picking up/using/dropping
     * batteries.  
     * <p>
     * The expected return value of this method depends on <code>isMoveNextTo18Plus</code>:
     * <ul>
     * <li>If <code>isMoveNextTo18Plus</code> returns <code>0</code>, then <code>moveNextTo</code> will only be called if there are no obstacles in the rectangle
     * covering <code>robot</code> and <code>other</code>. Moreover, your implementation must be optimal only in the number of moves (i.e. ignore the fact that turning consumes energy).</li>
     * <li>If <code>isMoveNextTo18Plus</code> returns <code>1</code>, then <code>moveNextTo</code> must take into account obstacles (i.e. walls, other robots) and the 
     * fact that turning consumes energy.</li>
     * </ul>
     * </p>
     * Do not change the state if <code>robot</code> and <code>other</code> are not located on the same board.
     */
    @Override
    public void moveNextTo(Robot robot, Robot other) {
        if (robot != null)
            robot.moveNextTo(other);
    }

    /**
     * Make <code>robot</code> shoot in the orientation it is currently facing (if possible).
     * 
     * Students working on their own are allowed to throw <code>UnsupportedOperationException</code>.
     */
    @Override
    public void shoot(Robot robot) throws UnsupportedOperationException {
        if (robot != null)
            robot.shoot();
    }

    /**
     * Create a new wall.
     * 
     * Students working on their own are allowed to throw <code>UnsupportedOperationException</code>.
     */
    @Override
    public Wall createWall() throws UnsupportedOperationException {
        return new Wall();
    }

    /**
     * Put <code>robot</code> at position (<code>x</code>, <code>y</code>) on <code>board</code> (if possible).
     * 
     * Students working on their own are allowed to throw <code>UnsupportedOperationException</code>.
     */
    @Override
    public void putWall(Board board, long x, long y, Wall wall)
            throws UnsupportedOperationException {
        if (board != null && board.isValidPosition(x, y))
            board.putElement(Position.newPosition(x, y, board), wall);
    }

    /**
     * Return the x-coordinate of <code>wall</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>wall</code> is not placed on a board.
     * 
     * Students working on their own are allowed to throw <code>UnsupportedOperationException</code>.
     */
    @Override
    public long getWallX(Wall wall) throws IllegalStateException,
            UnsupportedOperationException {
        if (wall == null || wall.getPosition() == null)
            throw new IllegalStateException();
        return wall.getPosition().X;
    }

    /**
     * Return the y-coordinate of <code>wall</code>.
     * 
     * This method must throw <code>IllegalStateException</code> if <code>wall</code> is not placed on a board.
     * 
     * Students working on their own are allowed to throw <code>UnsupportedOperationException</code>.
     */
    @Override
    public long getWallY(Wall wall) throws IllegalStateException,
            UnsupportedOperationException {
        if (wall == null || wall.getPosition() == null)
            throw new IllegalStateException();
        return wall.getPosition().Y;
    }

    /**
     * Return a set containing all robots on <code>board</code>.
     */
    @Override
    public Set<Robot> getRobots(Board board) {
        Set<Robot> robots = new HashSet<Robot>();
        if (board != null)
            for (Element elem : board.getElementsOf(Robot.class))
                robots.add((Robot) elem);
        return robots;
    }

    /**
     * Return a set containing all walls on <code>board</code>.
     * 
     * Students working on their own are allowed to throw <code>UnsupportedOperationException</code>.
     */
    @Override
    public Set<Wall> getWalls(Board board) throws UnsupportedOperationException {
        Set<Wall> walls = new HashSet<Wall>();
        if (board != null)
            for (Element elem : board.getElementsOf(Wall.class))
                walls.add((Wall) elem);
        return walls;
    }

    /**
     * Return a set containing all repair kits on <code>board</code>.
     */
    @Override
    public Set<RepairKit> getRepairKits(Board board) {
        Set<RepairKit> repairKits = new HashSet<RepairKit>();
        if (board != null)
            for (Element elem : board.getElementsOf(RepairKit.class))
                repairKits.add((RepairKit) elem);
        return repairKits;
    }

    /**
     * Return a set containing all surprise boxes on <code>board</code>.
     */
    @Override
    public Set<SurpriseBox> getSurpriseBoxes(Board board) {
        Set<SurpriseBox> surpriseBoxes = new HashSet<SurpriseBox>();
        if (board != null)
            for (Element elem : board.getElementsOf(SurpriseBox.class))
                surpriseBoxes.add((SurpriseBox) elem);
        return surpriseBoxes;
    }

    /**
     * Return a set containing all batteries on <code>board</code>.
     */
    @Override
    public Set<Battery> getBatteries(Board board) {
        Set<Battery> batteries = new HashSet<Battery>();
        if (board != null)
            for (Element elem : board.getElementsOf(Battery.class))
                batteries.add((Battery) elem);
        return batteries;
    }

    /**
     * Load the program stored at <code>path</code> and assign it to <code>robot</code>.
     * 
     * Return <code>0</code> if the operation completed successfully; otherwise, return a negative number.
     */
    @Override
    public int loadProgramFromFile(Robot robot, String path) {
        StringBuilder programString = new StringBuilder();
        String newLine = System.getProperty("line.separator");
        Scanner scanner = new Scanner("");
        try {
            scanner = new Scanner(new FileReader(path));
            while (scanner.hasNextLine())
                programString.append(scanner.nextLine() + newLine);
        } catch (FileNotFoundException e) {
            System.err.println("loadProgramFile: "
                    + "The file with the provided path was not found.");
        } finally {
            scanner.close();
        }

        if (robot != null && programString.length() > 0) {
            robot.setProgram(new Program(programString.toString(), robot));
            return 0;
        }
        return -1;
    }

    /**
     * Save the program of <code>robot</code> in a file at <code>path</code>.
     * 
     * Return <code>0</code> if the operation completed successfully; otherwise, return a negative number.
     */
    @Override
    public int saveProgramToFile(Robot robot, String path) {
        if (robot != null && robot.getProgram() != null) {
            try {
                Writer out = new FileWriter(path);
                out.write(robot.getProgram().toString());
            } catch (FileNotFoundException e) {
                System.err.println("saveProgramToFile:"
                        + " The file with the provided path was not found.");
                return -1;
            } catch (IOException e) {
                System.err.println("saveProgramToFile:"
                        + " An I/O error occured while trying to write "
                        + "the program to path.");
                return -1;
            }
            return 0;
        }
        return -1;
    }

    /**
     * Pretty print the program of <code>robot</code> via <code>writer</code>.
     */
    @Override
    public void prettyPrintProgram(Robot robot, Writer writer) {
        if (robot != null && robot.getProgram() != null)
            try {
                writer.write(robot.getProgram().toString());
            } catch (IOException e) {
                System.err.println("prettyPrintProgram: "
                        + "An I/O error occured while trying to write "
                        + "the program to writer.");
            }
    }

    /**
     * Execute <code>n</code> basic steps in the program of <code>robot</code>.
     * 
     * <p>For example, consider the program (seq (move) (shoot)). The first step performs a move command,
     * the second step performs a shoot command and all subsequent steps have no effect.</p> 
     * 
     * <p>Note that if n equals 1, then only the move command is executed. The next call to stepn then starts
     * with the shoot command.</p>
     */
    @Override
    public void stepn(Robot robot, int n) {
        if (robot != null)
            robot.stepn(n);
    }

    /**
     * Return the set of items that <code>robot</code> is carrying.
     */
    public Set<Item> getPossessions(Robot robot) {
        if (robot != null) {
            Set<Item> possesions = robot.getPossesions();
            return possesions;
        }
        return new HashSet<Item>();
    }
}
